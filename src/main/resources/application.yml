server:
  port: 18000
  servlet:
    context-path: /

spring:
  # Spring 整合kafka
  kafka:
    bootstrap-servers: hlsijx:2181
    producer:
      # 发送消息失败时的一个重试次数
      retries: 0
      # 批量发送数据的配置
      batch-size: 16384
      # 设置kafka生产者内存区的大小（32M）
      buffer-memory: 33554432
      # kafka消息的序列化配置
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.apache.kafka.common.serialization.StringSerializer
      # ack = 0 ： 生产者在成功写入消息之前不会等待任何来自服务器的响应
      # ack = 1 ： 只要集群的首领节点收到消息，生产者就会受到一个来自服务器成功响应
      # ack = -1 ：表示分区leader必须等待消息被成功写入到所有的ISR副本（同步副本）中才任务producer请求成功。这种方案可靠性最高，性能最差
      acks: 1
    consumer:
      # 消息的签收机制：手工签收
      enable-auto-commit: false
      # latest(默认值)：在偏移量无效的情况下，消费者将从最新的记录开始读取数据（在启动消费者之后生效）
      # earliest：在偏移量无效的情况下，消费者将从起始位置读取分区的记录
      auto-offset-reset: earliest
      # 序列化配置
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
    listener:
      ack-mode: manual
      # 线程的并行度
      concurrency: 5